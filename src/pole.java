
/**********************************************************************************************************************/
/*Класс с игровым полем и всеми действиями с ним*/
/**********************************************************************************************************************/
public class pole {

    private final static byte bt_empty = 2; //Обозначение пустых ячеек в массиве
    private static byte bt_user_znak = -1; //чем играет пользователь: крестиком(1) или ноликом(0)
    private static byte bt_comp_znak = -1; //чем играет компьютер: крестиком(1) или ноликом(0)
    private static byte[] ar_pole = {-1,-1,-1, -1,-1,-1, -1,-1,-1};

    /******************************************************************************************************************/
    /* pole - инициализируем поле
    Параметры:
        byte b_user_znak - каким символом ходит пользователь: крестик(true) или нолик(false)?
    Возвращаемое значение:
        нет
    */
    /******************************************************************************************************************/

    public static void pole(boolean b_user_znak) {

        bt_user_znak = (byte)((b_user_znak) ? 1 : 0);
        bt_comp_znak = (byte)((b_user_znak) ? 0 : 1);

        for (byte i = 0; i < ar_pole.length; i++) {
            ar_pole[i] = bt_empty;
        }

    }

    /******************************************************************************************************************/
    /* printField - отображаем поле на экране
    Параметры:
        нет
    Возвращаемое значение:
        нет
    Особенности:
        внешняя индексация для пользователя:
            1 2 3
            4 5 6
            7 8 9
        внутренний программный вид:
            0 1 2
            3 4 5
            6 7 8
        Обозначения:
            1 - крестик
            0 - нолик
            2(любое другое число) - отображается номер ячейки
    */
    /******************************************************************************************************************/

    public static void printField() {
        System.out.println("\n================================================");
        System.out.println("------------------");
        String str_print= "|";
        for (byte i = 0; i < ar_pole.length; i++) {

            str_print += "  ";

            if (ar_pole[i] == 1) {
                str_print += 'X';
            } else if (ar_pole[i] == 0) {
                str_print += '0';
            } else {
                str_print += (i+1);
            }

            str_print += "  ";

            if ((i == 2) || (i == 5) || (i == 8)) str_print += " |\n";
            if ((i == 2) || (i == 5)) str_print += "|----------------|\n|";

        }
        System.out.print(str_print);
        System.out.println("------------------\n");
    }

    /******************************************************************************************************************/
    /* index - проверяем чем занята данная конкретная ячейка на поле
    Параметры:
        byte bt_index - индекс ячейки которую проверяем
            0 1 2
            3 4 5
            6 7 8
    Возвращаемое значение:
        byte
           -1 - ошибка индекса
            0 - ячейка пуста
            1 - юзер(нолик или крестик, неважно)
            2 - компьютер(нолик или крестик, неважно)
    */
    /******************************************************************************************************************/

    public static byte index(int n_index) {

        if ((n_index < 0) || (n_index > 8)) {
            return -1;
        }

        if (ar_pole[n_index] == bt_user_znak) {
            //Ячейка занята юзером
            return 1; //единица в данном случае обозначение места занятого под знак юзера

        } else if (ar_pole[n_index] == bt_comp_znak) {
            //Ячейка занята компьютером
            return 2; //единица в данном случае обозначение места занятого под знак компьютера

        }

        //Любое другое значение в ячейке
        return 0;

    }

    /******************************************************************************************************************/
    /* setIndex - устанавливаем ячейку в конкретное значение
    Параметры:
        int n_index - индекс ячейки которую заполняем
            0 1 2
            3 4 5
            6 7 8
        int value - значение
            0 - ячейка пуста
            1 - юзер(нолик или крестик, неважно)
            2 - компьютер(нолик или крестик, неважно)
    Возвращаемое значение:
        boolean
            true - операция успешно выполнена
            false - проблемы с индексом или значением
    */
    /******************************************************************************************************************/

    public static boolean setIndex(int n_index, int n_value) {

        if ((n_index < 0) || (n_index > 8) || (n_value < 0) || (n_value > 2)) {
            return false;
        }

        ar_pole[n_index] = (byte)n_value;
        return true;

    }


    /******************************************************************************************************************/
    /* length - сколько всего клеток занято на поле(юзер+компьютер)
    Параметры:
        нет
    Возвращаемое значение:
        byte - количество клеток
    */
    /******************************************************************************************************************/

    public static byte lengthAll() {

        byte bt_counter = 0;
        for(byte i = 0; i < ar_pole.length; i++){
            //Подсчитываем сколько pole.index возвращает цифр 1 и 2,
            // эти ячейки заняты либо пользователем, либо компьютером
            if ((pole.index(i) == 1) || (pole.index(i) == 2)) {
                bt_counter++;
            }
        }

        System.out.println("debug: length: " + bt_counter);

        return bt_counter;

    }

    /******************************************************************************************************************/
    /* userLength - сколько клеток занято на поле под знаки компьютера
    Параметры:
        нет
    Возвращаемое значение:
        byte - количество клеток
    */
    /******************************************************************************************************************/

    public static byte userLength() {

        byte bt_counter = 0;
        for(byte i = 0; i < ar_pole.length; i++){
            //Подсчитываем сколько pole.index возвращает цифр 1, эти ячейки заняты пользователем
            if (pole.index(i) == 1) {
                bt_counter++;
            }
        }

        System.out.println("debug: userLength: " + bt_counter);

        return bt_counter;

    }

    /******************************************************************************************************************/
    /* compLength - сколько клеток занято на поле под знаки компьютера
    Параметры:
        нет
    Возвращаемое значение:
        byte - количество клеток
    */
    /******************************************************************************************************************/

    public static byte compLength() {

        byte bt_counter = 0;
        for(byte i = 0; i < ar_pole.length; i++){
            //Подсчитываем сколько pole.index возвращает цифр 2, эти ячейки заняты компьютером
            if (pole.index(i) == 2) {
                bt_counter++;
            }
        }

        System.out.println("debug: compLength: " + bt_counter);

        return bt_counter;

    }


}
